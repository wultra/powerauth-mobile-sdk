/*
 * Copyright 2021 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}


android {
    namespace = "io.getlime.security.powerauth"

    compileSdk rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    ndkVersion rootProject.ext.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName VERSION_NAME
        versionCode 1
        buildConfigField "String", "LIBRARY_VERSION_NAME", "\"" + VERSION_NAME + "\""

        vectorDrawables.useSupportLibrary = true

        externalNativeBuild {
            ndkBuild {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        loadInstrumentationTestConfigProperties(project, owner)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    dependencies {
        implementation 'io.getlime.core:rest-model-base:1.2.0'
        implementation 'androidx.annotation:annotation:1.7.1'
        implementation 'androidx.appcompat:appcompat:1.6.1'
        implementation 'androidx.fragment:fragment:1.6.2'
        implementation 'androidx.biometric:biometric:1.1.0'
        implementation 'com.google.code.gson:gson:2.10.1'

        // testing
        androidTestImplementation 'androidx.test:core:1.5.0'
        androidTestImplementation 'androidx.test:runner:1.5.2'
        androidTestImplementation 'androidx.test:rules:1.5.0'
        androidTestImplementation 'androidx.test.ext:junit:1.1.5'
        androidTestImplementation 'io.getlime.core:rest-model-base:1.2.0'
        androidTestImplementation 'com.google.code.gson:gson:2.10.1'

        constraints {
            def kotlinVersion = "1.8.20" // brought transitively from dependencies
            implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}") {
                because("Avoids conflicts with different versions of 'kotlin-stdlib'")
            }
        }
    }
    
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


// Load properties for instrumentation tests.
static def loadInstrumentationTestConfigProperties(project, defaultConfig) {
    def configsRoot = new File("${project.rootProject.projectDir}/configs")
    // Default, public config pointing to localhost PowerAuth Stack installation.
    def defaultPropertiesFile = new File(configsRoot, "default-instrumentation-tests.properties")
    // Private config where you can put configuration with sensitive values.
    def privatePropertiesFile = new File(configsRoot, "private-instrumentation-tests.properties")
    // Select config file, prefer private over default.
    def configFile = privatePropertiesFile.canRead() ? privatePropertiesFile : defaultPropertiesFile
    // List of supported arguments
    def instrumentationArguments = [
            "test.powerauth.restApiUrl",
            "test.powerauth.serverApiUrl",
            "test.powerauth.serverAuthUser",
            "test.powerauth.serverAuthPass",
            "test.powerauth.serverVersion",
            "test.powerauth.serverAutoCommit",
            "test.powerauth.appName",
            "test.powerauth.appVersion",
            "test.powerauth.userIdentifier" ]

    project.logger.info("LOADING_PROPERTIES Reading $configFile")
    if (configFile.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(configFile))

        for (key in instrumentationArguments) {
            defaultConfig.testInstrumentationRunnerArgument key, "${props[key]}"
        }
    } else {
        project.logger.warn("Loading properties error: Missing configuration file: $configFile")
    }
}

// Task to prepare OpenSSL precompiled library
task prepareOpenSSL(type: Exec) {
    workingDir '../../cc7'
    commandLine 'sh', './openssl-build/fetch.sh', 'android'
}

// Task to verify release to do not contain debug symbols
task verifyDebugSymbolsForRelease(type: Exec) {
    commandLine 'sh', '../../scripts/android-validate-build.sh', '--aar', "${buildDir}/outputs/aar/PowerAuthLibrary-release.aar"
}

afterEvaluate {
    externalNativeBuildCleanDebug.dependsOn prepareOpenSSL
    externalNativeBuildCleanRelease.dependsOn prepareOpenSSL
    preBuild.dependsOn prepareOpenSSL
    verifyDebugSymbolsForRelease.dependsOn assembleRelease
    publishReleasePublicationToMavenLocal.dependsOn verifyDebugSymbolsForRelease
    publishReleasePublicationToSonatypeRepository.dependsOn verifyDebugSymbolsForRelease
}

apply from: 'android-release-aar.gradle'
