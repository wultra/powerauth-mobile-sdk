/*
 * Copyright 2021 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    ndkVersion rootProject.ext.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName VERSION_NAME
        versionCode 1

        vectorDrawables.useSupportLibrary = true

        externalNativeBuild {
            ndkBuild {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        loadInstrumentationTestConfigProperties(project, owner)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    dependencies {
        implementation 'io.getlime.core:rest-model-base:1.2.0'
        implementation 'androidx.annotation:annotation:1.2.0'
        implementation 'androidx.appcompat:appcompat:1.3.1'
        implementation 'androidx.fragment:fragment:1.3.6'
        implementation 'androidx.biometric:biometric:1.1.0'
        implementation 'com.google.code.gson:gson:2.8.6'

        // testing
        androidTestImplementation 'androidx.test:core:1.4.0'
        androidTestImplementation 'androidx.test:runner:1.4.0'
        androidTestImplementation 'androidx.test:rules:1.4.0'
        androidTestImplementation 'androidx.test.ext:junit:1.1.3'
        androidTestImplementation 'io.getlime.core:rest-model-base:1.2.0'
        androidTestImplementation 'com.google.code.gson:gson:2.8.6'
    }
    
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


// Load properties for instrumentation tests.
static def loadInstrumentationTestConfigProperties(project, defaultConfig) {
    def configsRoot = new File("${project.rootProject.projectDir}/configs")
    def configPropertiesFile = new File(configsRoot, "powerauth-instrumentation-tests.properties")

    def instrumentationArguments = [
            "test.powerauth.restApiUrl",
            "test.powerauth.serverApiUrl",
            "test.powerauth.serverVersion",
            "test.powerauth.appName",
            "test.powerauth.appVersion",
            "test.powerauth.userIdentifier" ]

    project.logger.info("LOADING_PROPERTIES Reading $configPropertiesFile")
    if (configPropertiesFile.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(configPropertiesFile))

        for (key in instrumentationArguments) {
            defaultConfig.testInstrumentationRunnerArgument key, "${props[key]}"
        }
    } else {
        project.logger.warn("Loading properties error: Missing $configPropertiesFile")
    }
}

// Task to prepare OpenSSL precompiled library
task prepareOpenSSL(type: Exec) {
    workingDir '../../cc7'
    commandLine 'sh', './openssl-build/fetch.sh', 'android'
}

// Task to verify release to do not contain debug symbols
task verifyDebugSymbolsForRelease(type: Exec) {
    commandLine 'sh', '../../scripts/android-validate-build.sh', '--aar', "${buildDir}/outputs/aar/PowerAuthLibrary-release.aar"
}

afterEvaluate {
    externalNativeBuildCleanDebug.dependsOn prepareOpenSSL
    externalNativeBuildCleanRelease.dependsOn prepareOpenSSL
    preBuild.dependsOn prepareOpenSSL
    verifyDebugSymbolsForRelease.dependsOn assembleRelease
    publishReleasePublicationToMavenLocal.dependsOn verifyDebugSymbolsForRelease
    publishReleasePublicationToSonatypeRepository.dependsOn verifyDebugSymbolsForRelease
}

apply from: 'android-release-aar.gradle'
